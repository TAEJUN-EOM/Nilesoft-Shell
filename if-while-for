#!/bin/bash

#if 명령
#then
#    다른 명령
#else
#    또 다른 명령
#fi

#if문으로 할 수있는 여러 파일 관련 판정
-d  주어진 디렉토리가 있는지 판정한다
-e  주어진 파일이 있는지 판정한다.
-r  주어진 파일이 존재하며 읽을 수 있는지 판정한다.
-w  주어진 파일이 존재하며 쓸 수 있는지 판정한다.
-x  주어진 파일이 존재하며 실행할 수 있는지 판정한다.

#수치 판정 연산자
-eq 두 수가 같은지 판정한다.
-gt 앞의 수가 뒤의 수보다 큰지 판정한다.
-lt 앞의 수가 뒤의 수보다 작은지 판정한다.


# while 문에는 하나의 조건식을 지정해야 한다. 이 조건식은 루프 반복 여부를 결정하는데,
# if 문과 마찬가지로 하나의 명령 (또는 하나의 파이프라인)의 반환값을 조건으로 사용할 수도 있고 이중 대괄호 쌍이나 이중 괄호 쌍으로 좀 더 복잡한 조건을 지정할 수도 있다.

# bash에서는 루프의 본문을 do와 done이라는 두 키워드로 표시한다.

# while

i=0
while (( i < 1000 ))
do
  echo $i
  let i++
done
▲ 이 루프는 변수 i가 1000보다 작은 동안('while') 반복된다. 루프 본문이 실행될때마다 i의 값을 화면에 출력한다.
  그런 다음 let 명령을 이용해서 i++라는 하나의 산술 표현식을 실행하는데, 이 표현식은 i를 1씩 증가한다.

while ls | grep -q pdf
do
  echo -n '이름에 pdf가 포함된 파일이 이 디렉토리에 있음: '
  pwd
  cd ..
done
▲ 명령을 실행한 반환값을 루프 반복 조건식으로 사용한다.


# for

# 반복 횟수에 기초한 간단한 형태의 for 루프.
# 이 형태는 C나 Java의 for와 아주 비슷하다. 단, 조건식을 이중 괄호 쌍으로 감싼다는 점과 중괄호 쌍 대신 do와 done으로 루프 본문을 구분한다는 점이 다르다.
for ((i=0; i < 100; i++))
do
  echo $i
done

# 또 다른 형태는 스크립트에 (또는 스크립트 안의 함수에) 전달된 모든 매개변수를 하나씩 훑는 for 루프.
# 즉, $1,$2,$3 등 차례로 훑을 때 이 형태를 사용한다.
for ARG
do
  echo 여기 인수 하나: $ARG
done

# 임의의 값들을 나열하고 각각의 값을 차례로 루프 본문에서 사용하는 형태의 for문도 있다.
for VAL in 20 3 강아지 복숭아 7 바닐라
do
  echo $VAL
done

# for 루프에 사용할 값들을 다른 프로그램이나 셸 기능을 이용해서 생성하는 것도 가능하다.
for VAL in $(ls | grep pdf) {0..5}
do
  echo $VAL
done
▲ 루프가 돌면서 VAL에는 ls를 grep에 연결해서 생성한,pdf가 포함된파일 이름들이 차례로 배정되며, 그다음에는 0에서 5까지의 값이 차례로 배정된다.
  하나의 변수에 파일 이름을 배정하고 어떨 때는 정숫값을 배정한다는 것이 그리 말이 되지 않지만, 어쨋든 그런 일도 가능하다는 점을 알아두기 바란다.
